//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.9
//
package com.eris.activities;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.IBinder;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.content.ContextCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.ListView;
import android.widget.Toast;

import com.amazonaws.mobile.AWSMobileClient;
import com.amazonaws.mobile.user.IdentityManager;
import com.eris.R;
import com.eris.classes.NavigationDrawerMenuItem;
import com.eris.fragments.DemoResponderDatabaseFragment;
import com.eris.fragments.HomeFragment;
import com.eris.fragments.IncidentHistoryFragment;
import com.eris.fragments.IncidentInfoFragment;
import com.eris.fragments.IncidentListFragment;
import com.eris.fragments.IncidentDatabaseFragment;
import com.eris.fragments.SettingsFragment;
import com.eris.navigation.NavigationDrawer;
import com.eris.services.LocationService;
import com.eris.services.DatabaseService;

import com.thalmic.myo.AbstractDeviceListener;
import com.thalmic.myo.Arm;
import com.thalmic.myo.DeviceListener;
import com.thalmic.myo.Hub;
import com.thalmic.myo.Myo;
import com.thalmic.myo.Pose;
import com.thalmic.myo.Quaternion;
import com.thalmic.myo.XDirection;
import com.thalmic.myo.scanner.ScanActivity;

import java.util.concurrent.CountDownLatch;

public class MainActivity extends AppCompatActivity implements View.OnClickListener {
    /** Class name for log messages. */
    private final static String TAG = MainActivity.class.getSimpleName();

    /** Bundle key for saving/restoring the toolbar title. */
    private final static String BUNDLE_KEY_TOOLBAR_TITLE = "title";

    /** The identity manager used to keep track of the current user account. */
    private IdentityManager identityManager;

    /** The toolbar view control. */
    private Toolbar toolbar;

    /** Our navigation drawer class for handling navigation drawer logic. */
    private NavigationDrawer navigationDrawer;

    /** The helper class used to toggle the left navigation drawer open and closed. */
    private ActionBarDrawerToggle drawerToggle;

    public LocationService locationService;
    public DatabaseService databaseService;
    public CountDownLatch databaseServiceLatch;

    private boolean isLocked;
    private DeviceListener mListener;

    /*
     * Constants
     */
    final private int REQUEST_CODE_ACCESS_FINE_LOCATION = 123;

    private ServiceConnection serviceConnection = new ServiceConnection() {
        @Override
        public void onServiceConnected(ComponentName componentName, IBinder iBinder) {
            if (iBinder instanceof DatabaseService.DatabaseServiceBinder) {
                databaseService = ((DatabaseService.DatabaseServiceBinder)iBinder).getService();
                databaseServiceLatch.countDown();
            }
        }

        @Override
        public void onServiceDisconnected(ComponentName componentName) {
            //TODO idk what to do here.  How do I tell which service stopped?
        }
    };




    /**
     * Initializes the Toolbar for use with the activity.
     */
    private void setupToolbar(final Bundle savedInstanceState) {
        toolbar = (Toolbar) findViewById(com.eris.R.id.toolbar);
        // Set up the activity to use this toolbar. As a side effect this sets the Toolbar's title
        // to the activity's title.
        setSupportActionBar(toolbar);

        if (savedInstanceState != null) {
            // Some IDEs such as Android Studio complain about possible NPE without this check.
            assert getSupportActionBar() != null;

            // Restore the Toolbar's title.
            getSupportActionBar().setTitle(
                savedInstanceState.getCharSequence(BUNDLE_KEY_TOOLBAR_TITLE));
        }
    }


    /**
     * Initializes the navigation drawer menu to allow toggling via the toolbar or swipe from the
     * side of the screen.
     */
    private void setupNavigationMenu(final Bundle savedInstanceState) {
        final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        final ListView drawerItems = (ListView) findViewById(R.id.nav_drawer_items);

        // Create the navigation drawer.
        navigationDrawer = new NavigationDrawer(this, toolbar, drawerLayout, drawerItems,
            R.id.main_fragment_container);

        // Add navigation drawer menu items.
        NavigationDrawerMenuItem incidentListItem = new NavigationDrawerMenuItem(
                "Incident List", R.mipmap.ic_explore_black_24dp,
                IncidentListFragment.class.getName(), IncidentListFragment.class.getSimpleName()
        );
        NavigationDrawerMenuItem incidentHistoryItem = new NavigationDrawerMenuItem(
                "Incident History", R.drawable.ic_history_black_24dp,
                IncidentHistoryFragment.class.getName(), IncidentHistoryFragment.class.getSimpleName()
        );
        NavigationDrawerMenuItem commandStructureItem = new NavigationDrawerMenuItem(
                "Command Structure", R.mipmap.ic_line_style_black_24dp,
                DemoResponderDatabaseFragment.class.getName(), DemoResponderDatabaseFragment.class.getSimpleName()
        );
        NavigationDrawerMenuItem databaseServiceTestItem = new NavigationDrawerMenuItem(
                "Database Test", R.mipmap.ic_donut_large_black_24dp,
                IncidentDatabaseFragment.class.getName(), IncidentDatabaseFragment.class.getSimpleName()
        );
        NavigationDrawerMenuItem settingsItem = new NavigationDrawerMenuItem(
                "Settings", R.mipmap.ic_settings_black_24dp,
                SettingsFragment.class.getName(), SettingsFragment.class.getSimpleName()
        );

        navigationDrawer.addItemToMenu(incidentListItem);
        navigationDrawer.addItemToMenu(incidentHistoryItem);
        navigationDrawer.addItemToMenu(commandStructureItem);
        navigationDrawer.addItemToMenu(databaseServiceTestItem);
        navigationDrawer.addItemToMenu(settingsItem);

        if (savedInstanceState == null) {
            // Add the home fragment to be displayed initially.
            navigationDrawer.showHome();  // Change this later if needed 44444444
        }
    }

    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        databaseServiceLatch = new CountDownLatch(1);
        // Obtain a reference to the mobile client. It is created in the Application class,
        // but in case a custom Application class is not used, we initialize it here if necessary.
        AWSMobileClient.initializeMobileClientIfNecessary(this);
        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();

        // Obtain a reference to the identity manager.
        identityManager = awsMobileClient.getIdentityManager();

        setContentView(R.layout.activity_main);

        setupToolbar(savedInstanceState);

        setupNavigationMenu(savedInstanceState);

        // Initialize the Hub for Myo
        Hub myoHub = Hub.getInstance();
        if (!myoHub.init(this)) {
            Log.e(TAG, "Could not initialize the Hub for Myo.");
            finish();
            return;
        }

        mListener = new AbstractDeviceListener() {
            @Override
            public void onConnect(Myo myo, long timestamp) {
                Log.d(TAG, "Myo Connected");
            }

            @Override
            public void onDisconnect(Myo myo, long timestamp) {
                Log.d(TAG, "Myo Disconnected");
            }

            // onArmSync() is called whenever Myo has recognized a Sync Gesture after someone has put it on their
            // arm. This lets Myo know which arm it's on and which way it's facing.
            @Override
            public void onArmSync(Myo myo, long timestamp, Arm arm, XDirection xDirection) {
                Log.d(TAG, "Myo Synced");
            }

            // onArmUnsync() is called whenever Myo has detected that it was moved from a stable position on a person's arm after
            // it recognized the arm. Typically this happens when someone takes Myo off of their arm, but it can also happen
            // when Myo is moved around on the arm.
            @Override
            public void onArmUnsync(Myo myo, long timestamp) {
                Log.d(TAG, "Myo Unsynced");
            }

            // onUnlock() is called whenever a synced Myo has been unlocked. Under the standard locking
            // policy, that means poses will now be delivered to the listener.
            @Override
            public void onUnlock(Myo myo, long timestamp) {
                Log.d(TAG, "Myo unlocked");
            }

            // onLock() is called whenever a synced Myo has been locked. Under the standard locking
            // policy, that means poses will no longer be delivered to the listener.
            @Override
            public void onLock(Myo myo, long timestamp) {
                Log.d(TAG, "Myo locked");
            }

            // onOrientationData() is called whenever a Myo provides its current orientation,
            // represented as a quaternion.
            @Override
            public void onOrientationData(Myo myo, long timestamp, Quaternion rotation) {
               /* // Calculate Euler angles (roll, pitch, and yaw) from the quaternion.
                float roll = (float) Math.toDegrees(Quaternion.roll(rotation));
                float pitch = (float) Math.toDegrees(Quaternion.pitch(rotation));
                float yaw = (float) Math.toDegrees(Quaternion.yaw(rotation));

                // Adjust roll and pitch for the orientation of the Myo on the arm.
                if (myo.getXDirection() == XDirection.TOWARD_ELBOW) {
                    roll *= -1;
                    pitch *= -1;
                }

                // Next, we apply a rotation to the text view using the roll, pitch, and yaw.
                mTextView.setRotation(roll);
                mTextView.setRotationX(pitch);
                mTextView.setRotationY(yaw);*/
            }


            @Override
            public void onPose(Myo myo, long timestamp, Pose pose) {
                if(pose == Pose.REST) {
                    return;
                } else if (pose == Pose.DOUBLE_TAP) {
                    if (isLocked) {
                        Log.d(TAG, "Myo Unlocked");
                    } else {
                        Log.d(TAG, "Myo Locked");
                    }
                    isLocked = !isLocked;
                    return;
                } else if (isLocked) {
                    return;
                }
                if(pose == Pose.FINGERS_SPREAD) {
                    Log.d(TAG, "FINGERS SPREAD MADE");
                    //TODO Do something else
                } else if (pose == Pose.FIST) {
                    Log.d(TAG, "FIST MADE");
                    //TODO Do something.
                }
            }
        };

        Hub.getInstance().addListener(mListener);
        Hub.getInstance().attachToAdjacentMyo();
        Hub.getInstance().setLockingPolicy(Hub.LockingPolicy.NONE);

        // Run the location and database services.
        runLocationService();
        runDatabaseService();
        bindService(new Intent(this, DatabaseService.class), serviceConnection, Context.BIND_AUTO_CREATE);
    }

    @Override
    protected void onResume() {
        super.onResume();
        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();
    }

    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        // Handle action bar item clicks here excluding the home button.
        int id = item.getItemId();
        if (R.id.action_scan == id) {
            onScanActionSelected();
            return true;
        }

        return super.onOptionsItemSelected(item);
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        super.onCreateOptionsMenu(menu);
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main, menu);
        return true;
    }

    private void onScanActionSelected() {
        // Launch the ScanActivity to scan for Myos to connect to.
        Intent intent = new Intent(this, ScanActivity.class);
        startActivity(intent);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        // We don't want any callbacks when the Activity is gone, so unregister the listener.
        Hub.getInstance().removeListener(mListener);

        if (isFinishing()) {
            // The Activity is finishing, so shutdown the Hub. This will disconnect from the Myo.
            Hub.getInstance().shutdown();
        }
    }

    @Override
    protected void onSaveInstanceState(final Bundle bundle) {
        super.onSaveInstanceState(bundle);
        // Save the title so it will be restored properly to match the view loaded when rotation
        // was changed or in case the activity was destroyed.
        if (toolbar != null) {
            bundle.putCharSequence(BUNDLE_KEY_TOOLBAR_TITLE, toolbar.getTitle());
        }
    }

    @Override
    public void onClick(final View view) {
    }

    @Override
    protected void onPause() {
        super.onPause();
    }

    @Override
    public void onBackPressed() {
        final FragmentManager fragmentManager = this.getSupportFragmentManager();
        
        if (navigationDrawer.isDrawerOpen()) {
            navigationDrawer.closeDrawer();
            return;
        }

        if (fragmentManager.getBackStackEntryCount() == 0) {
            if (fragmentManager.findFragmentByTag(IncidentListFragment.class.getSimpleName()) == null) {
                final Class fragmentClass = IncidentListFragment.class;
                // if we aren't on the home fragment, navigate home.
                final Fragment fragment = Fragment.instantiate(this, fragmentClass.getName());

                fragmentManager
                    .beginTransaction()
                    .replace(R.id.main_fragment_container, fragment, fragmentClass.getSimpleName())
                    .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
                    .commit();

                // Set the title for the fragment.
                setActionBarTitle(getString(R.string.app_name));

                return;
            }
        }
        super.onBackPressed();
    }


    /**
     * This method performs all action needed to start the location background service.
     */
    private void runLocationService() {

        // User has pre-allowed location permissions.
        if ( ContextCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED )
        {
            startService( new Intent(this, LocationService.class) ); // Start location service.
            return;
        }

        // Need to prompt user to allow location permissions.
        else  {
            ActivityCompat.requestPermissions(this,
                    new String[]{android.Manifest.permission.ACCESS_FINE_LOCATION},
                    REQUEST_CODE_ACCESS_FINE_LOCATION);
            return;
        }
    }


    /**
     * This method performs all action needed to start the database background service.
     */
    private void runDatabaseService() {
        startService(new Intent(this, DatabaseService.class));
        return;
    }


    /**
     * Required starting in Android SDK 23, developers now need to request permissions at runtime.
     * <p>
     * This method processes all request results.
     *
     * @param requestCode ID of request that was processed.
     * @param permissions Array of string permissions.
     * @param grantResults Array of result codes from processing the different requests.
     */
    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        switch (requestCode) {
            case REQUEST_CODE_ACCESS_FINE_LOCATION:
                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    startService( new Intent(this, LocationService.class) ); // Start location service.
                } else {
                    // Permission Denied
                    Toast.makeText(MainActivity.this, "ACCESS_FINE_LOCATION Denied", Toast.LENGTH_SHORT)
                            .show();
                }
                break;
            default:
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        }
    }


    /**
     * Sets the title of the ActionBar.
     * <p>
     * This method is necessary for altering the title of the ActionBar from within fragments.
     *
     * @param title New title string.
     */
    public void setActionBarTitle(String title) {
        final ActionBar actionBar = this.getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle(title);
        }
    }
}
